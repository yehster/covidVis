
<table width=100%>
	<tbody>
	<tr>
		<td rowspan=1 style="vertical-align:top;width:5%;'">
		<div data-bind="template: {name:'USMapKO'}"></div>
		<div style="width:10em" data-bind="template: { name: 'selectedState'}"></div></td>
		<td style="width:30%"><canvas id="cases" width="600" height="400"></canvas></td>
		<td style="width:30%"><canvas id="byPopulation" width="600" height="400"></canvas></td>
		<td width=30%><canvas id="deaths" width="600" height="400"></canvas></td>

			
	</tr>
	<tr>
		<td rowspan=1 style="vertical-align:top;width:5%;'"><div data-bind="template: {name:'NW'}"></div></td>
		<td style="width:30%"><canvas id="trajectory" width="600" height="400"></canvas></td>
		<td width=30%>
				<canvas id="trajectoryTime" width="600" height="400"></canvas>
		</td>
		<td width=30%>
			<canvas id="deathsByPopulation" width="600" height="400"></canvas>
		</td>

	</tr>
	</tbody>
</table>

<script>

ctx = document.getElementById('byPopulation').getContext('2d');
ctx2 = document.getElementById('cases').getContext('2d');
ctx3 = document.getElementById('deathsByPopulation').getContext('2d');
ctx4 = document.getElementById('deaths').getContext('2d');
ctx5 = document.getElementById('trajectory').getContext('2d');
ctx6 = document.getElementById('trajectoryTime').getContext('2d');


let vm = new covidVisViewModel(ctx,ctx2,ctx3,ctx4,ctx5,ctx6);
async function myPA(){
	
	await vm.addLocation(42);		
	await vm.addLocation(84042101);	
	await vm.addLocation(84042003);
	await vm.addLocation(84042069);
	await vm.addLocation(84042017);
	await vm.addLocation(84042091);
	await vm.addLocation(84042085);
}

async function myStates()
{
	


	
	await vm.addLocation(16);		
	await vm.addLocation(41);	
	await vm.addLocation(49);
	await vm.addLocation(53);
}

let dc = new dataChoices(vm);

async function getStateWithCounties(state)
{
	const res=await fetch("/populousInState/"+state+"/5");
	const data = await res.json(); 
	await vm.addLocation(state);
	for(let idx=0;idx<data.length;idx++)
	{
		let county=data[idx];
		console.log(county);
		await vm.addLocation(county.UID);
	}
	await vm.addLocation(84036083);
	console.log(data);
	
}

function heatToClass(heat)
{
	console.log(heat);
	if(heat <-0.5)
	{
		return "mapStatusNegative2"
	}
	if(heat <-0.05)
	{
		return "mapStatusNegative1"
	}
	if(heat <0.05)
	{
		return "mapStatusNeutral"
	}
	if(heat <=0.50)
	{
		return "mapStatusPositive1"
	}
	return "mapStatusPositive2";
}
async function highlightCountyMap()
{
	const res = await fetch("/countyheat/");
	const data = await res.json();
	const current = data[0]
	for(let idx=0;idx<current.length;idx++)
	{
		let curItem=current[idx];
		let location=curItem.location;
		if((location>=84000000) && (location < 84060000))
		{
			let locationString = location.toString();
			let classId="c"+locationString.substring(3);
			console.log(classId);
			let mapObservable=	dc.countyClass[classId];
			mapObservable(heatToClass(curItem.number));
		
			
		}
	}
}

async function highlightMap()
{
	const res = await fetch("/stateheat/");
	const data = await res.json();
	const current = data[0]
	for(let idx=0;idx<current.length;idx++)
	{
		let curItem=current[idx];
		console.log(curItem)
		let mapObservable=	dc.stateClass[curItem.location];
		console.log(curItem.day)
		console.log(heatToClass(curItem.number)+":"+curItem.number);
		mapObservable(heatToClass(curItem.number));
	}
}
async function startup(){

	 await dc.populate();

//	await getStateWithCounties(4);

	vm.updateAll();
	
	ko.applyBindings(dc);
	//dc.selectedState(dc.states[38]);
	await myPA();
	vm.updateAll();
	setupMap(dc);
	await highlightMap();
	await highlightCountyMap();
	$("g.state").children().on("click",function(evt){let code=$(evt.target).attr("code");dc.chooseStateByCode(parseInt(code));});
}

startup()


</script>